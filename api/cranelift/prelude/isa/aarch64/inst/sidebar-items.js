window.SIDEBAR_ITEMS = {"enum":[["ALUOp","Internal type ALUOp: defined at src/isa/aarch64/inst.isle line 951."],["ALUOp3","Internal type ALUOp3: defined at src/isa/aarch64/inst.isle line 989."],["AMode","Internal type AMode: defined at src/isa/aarch64/inst.isle line 1052."],["APIKey","Internal type APIKey: defined at src/isa/aarch64/inst.isle line 1586."],["AtomicRMWLoopOp","Internal type AtomicRMWLoopOp: defined at src/isa/aarch64/inst.isle line 1570."],["AtomicRMWOp","Internal type AtomicRMWOp: defined at src/isa/aarch64/inst.isle line 1555."],["BitOp","Internal type BitOp: defined at src/isa/aarch64/inst.isle line 1035."],["BranchTarget","A branch target. Either unresolved (basic-block index) or resolved (offset from end of current instruction)."],["BranchTargetType","Internal type BranchTargetType: defined at src/isa/aarch64/inst.isle line 1593."],["Cond","Condition for conditional branches."],["CondBrKind","The kind of conditional branch: the common-case-optimized “reg-is-zero” / “reg-is-nonzero” variants, or the generic one that tests the machine condition codes."],["ExtendOp","An extend operator for a register."],["FPUOp1","Internal type FPUOp1: defined at src/isa/aarch64/inst.isle line 1240."],["FPUOp2","Internal type FPUOp2: defined at src/isa/aarch64/inst.isle line 1250."],["FPUOp3","Internal type FPUOp3: defined at src/isa/aarch64/inst.isle line 1261."],["FPUOpRI","A floating-point unit (FPU) operation with two args, a register and an immediate."],["FPUOpRIMod","A floating-point unit (FPU) operation with two args, a register and an immediate that modifies its dest (so takes that input value as a separate virtual register)."],["FpuRoundMode","Internal type FpuRoundMode: defined at src/isa/aarch64/inst.isle line 1294."],["FpuToIntOp","Internal type FpuToIntOp: defined at src/isa/aarch64/inst.isle line 1267."],["Inst","Internal type MInst: defined at src/isa/aarch64/inst.isle line 2."],["IntToFpuOp","Internal type IntToFpuOp: defined at src/isa/aarch64/inst.isle line 1280."],["LabelUse","Different forms of label references for different instruction formats."],["MemLabel","A reference to some memory address."],["MoveWideOp","Internal type MoveWideOp: defined at src/isa/aarch64/inst.isle line 997."],["OperandSize","Type used to communicate the operand size of a machine instruction, as AArch64 has 32- and 64-bit variants of many instructions (and integer registers)."],["PairAMode","A memory argument to a load/store-pair."],["ScalarSize","Type used to communicate the size of a scalar SIMD & FP operand."],["ShiftOp","A shift operator for a register or immediate."],["VecALUModOp","Internal type VecALUModOp: defined at src/isa/aarch64/inst.isle line 1393."],["VecALUOp","Internal type VecALUOp: defined at src/isa/aarch64/inst.isle line 1316."],["VecExtendOp","Internal type VecExtendOp: defined at src/isa/aarch64/inst.isle line 1307."],["VecLanesOp","Internal type VecLanesOp: defined at src/isa/aarch64/inst.isle line 1528."],["VecMisc2","Internal type VecMisc2: defined at src/isa/aarch64/inst.isle line 1402."],["VecPairOp","Internal type VecPairOp: defined at src/isa/aarch64/inst.isle line 1509."],["VecRRLongOp","Internal type VecRRLongOp: defined at src/isa/aarch64/inst.isle line 1459."],["VecRRNarrowOp","Internal type VecRRNarrowOp: defined at src/isa/aarch64/inst.isle line 1474."],["VecRRPairLongOp","Internal type VecRRPairLongOp: defined at src/isa/aarch64/inst.isle line 1517."],["VecRRRLongModOp","Internal type VecRRRLongModOp: defined at src/isa/aarch64/inst.isle line 1500."],["VecRRRLongOp","Internal type VecRRRLongOp: defined at src/isa/aarch64/inst.isle line 1488."],["VecShiftImmModOp","Internal type VecShiftImmModOp: defined at src/isa/aarch64/inst.isle line 1548."],["VecShiftImmOp","Internal type VecShiftImmOp: defined at src/isa/aarch64/inst.isle line 1537."],["VectorSize","Type used to communicate the size of a vector operand."]],"mod":[["args","AArch64 ISA definitions: instruction arguments."],["imms","AArch64 ISA definitions: immediate constants."]],"struct":[["ASIMDFPModImm","Advanced SIMD modified immediate as used by the vector variant of FMOV."],["ASIMDMovModImm","Advanced SIMD modified immediate as used by MOVI/MVNI."],["CallIndInfo","Additional information for CallInd instructions, left out of line to lower the size of the Inst enum."],["CallInfo","Additional information for (direct) Call instructions, left out of line to lower the size of the Inst enum."],["FPULeftShiftImm","Floating-point unit immediate left shift."],["FPURightShiftImm","Floating-point unit immediate right shift."],["Imm12","A shifted immediate value in ‘imm12’ format: supports 12 bits, shifted left by 0 or 12 places."],["ImmLogic","An immediate for logical instructions."],["ImmShift","An immediate for shift instructions."],["JTSequenceInfo","Additional information for JTSequence instructions, left out of line to lower the size of the Inst enum."],["MoveWideConst","A 16-bit immediate for a MOVZ instruction, with a {0,16,32,48}-bit shift."],["NZCV","An immediate that represents the NZCV flags."],["SImm7Scaled","A signed, scaled 7-bit offset."],["SImm9","a 9-bit signed offset."],["ShiftOpAndAmt","A shift operator with an amount, guaranteed to be within range."],["ShiftOpShiftImm","A shift operator amount."],["UImm12Scaled","An unsigned, scaled 12-bit offset."],["UImm5","An unsigned 5-bit immediate."]]};