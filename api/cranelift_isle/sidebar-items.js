window.SIDEBAR_ITEMS = {"macro":[["log","Log a compiler-internal message for debugging purposes."]],"mod":[["ast","Abstract syntax tree (AST) created from parsed ISLE."],["codegen","Generate Rust code from a series of Sequences."],["compile","Compilation process, from AST to Sema to Sequences of Insts."],["error","Error types."],["lexer","Lexer for the ISLE language."],["overlap","Overlap detection for rules in ISLE."],["parser","Parser for ISLE language."],["sema","Semantic analysis."],["serialize","Put “sea of nodes” representation of a `RuleSet` into a sequential order."],["trie_again","A strongly-normalizing intermediate representation for ISLE rules. This representation is chosen to closely reflect the operations we can implement in Rust, to make code generation easy."]],"struct":[["DisjointSets","Stores disjoint sets and provides efficient operations to merge two sets, and to find a representative member of a set given any member of that set. In this implementation, sets always have at least two members, and can only be formed by the `merge` operation."],["StableMap","A wrapper around a [HashMap] which prevents accidentally observing the non-deterministic iteration order."],["StableSet","A wrapper around a [HashSet] which prevents accidentally observing the non-deterministic iteration order."]]};